%YAML 1.2
---
name: HUML
file_extensions:
  - huml
scope: source.huml

contexts:
  main:
    # Version directive
    - match: '^(%HUML)\s+(v[\d\.]+)?'
      captures:
        1: keyword.other.version.huml
        2: constant.numeric.version.huml
      push: comment-or-eol

    # Comments
    - match: '(#)\s'
      captures:
        1: punctuation.definition.comment.huml
      push: comment-content

    # Empty list/dict markers at document root
    - match: '^(\[\]|{})\s*$'
      scope: constant.numeric.huml

    # Multi-line list items
    - match: '^(\s*)(-)\s'
      captures:
        2: punctuation.definition.list.huml
      push: value-after-dash

    # Keys (quoted and unquoted)
    - match: '^(\s*)("[^"]*"|[a-zA-Z][a-zA-Z0-9_-]*)(::|:)(?=\s)'
      captures:
        2: entity.name.tag.huml
        3: punctuation.separator.key-value.huml
      push: value-after-indicator

    # Inline list at root
    - match: '^(?=\S)'
      push: inline-list-root

  value-after-dash:
    - match: '::'
      scope: punctuation.separator.key-value.huml
      set: value-after-indicator
    - include: scalar-values
    - match: '$'
      pop: true

  value-after-indicator:
    # Empty list/dict markers
    - match: '\s*(\[\]|{})'
      captures:
        1: constant.numeric.huml
      set: comment-or-eol

    # Multiline strings with ```
    - match: '\s*(```)'
      captures:
        1: punctuation.definition.string.begin.huml
      set: multiline-string-backtick

    # Multiline strings with """
    - match: '\s*(""")'
      captures:
        1: punctuation.definition.string.begin.huml
      set: multiline-string-quote

    # Comment immediately after :: indicator
    - match: '\s*(#)\s'
      captures:
        1: punctuation.definition.comment.huml
      push: comment-content

    # Inline dict
    - match: '\s*(?=[a-zA-Z"].*:(?:\s|$))'
      set: inline-dict

    # Inline list or scalar
    - match: '\s*'
      set: inline-list-or-scalar

  inline-list-root:
    # Check if it's a dict (has key: pattern)
    - match: '(?=[^,\n]*:(?:\s|,|$))'
      set: inline-dict
    # Otherwise treat as list
    - include: inline-list

  inline-list-or-scalar:
    # Check for comma to determine if it's a list
    - match: '(?=[^,\n]*,)'
      set: inline-list
    # Otherwise it's a scalar
    - include: scalar-values
    - match: '$'
      pop: true

  inline-list:
    - include: scalar-values
    - match: ','
      scope: punctuation.separator.sequence.huml
    - match: '$'
      pop: true

  inline-dict:
    # Quoted keys
    - match: '("[^"]*")(:)(?=\s)'
      captures:
        1: entity.name.tag.huml
        2: punctuation.separator.key-value.huml
    # Unquoted keys
    - match: '([a-zA-Z][a-zA-Z0-9_-]*)(:)(?=\s)'
      captures:
        1: entity.name.tag.huml
        2: punctuation.separator.key-value.huml
    - include: scalar-values
    - match: ','
      scope: punctuation.separator.sequence.huml
    - match: '$'
      pop: true

  scalar-values:
    # Special values (before strings to ensure they're not matched as unquoted strings)
    - match: '\b(true|false|null|nan|inf|\+inf|-inf)\b'
      scope: constant.numeric.huml

    # Strings
    - match: '"'
      scope: punctuation.definition.string.begin.huml
      push: double-quoted-string

    # Numbers
    - match: '\b(0x[0-9a-fA-F_]+|0o[0-7_]+|0b[01_]+)\b'
      scope: constant.numeric.huml
    - match: '\b([-+]?(?:\d[0-9_]*(?:\.[0-9_]+)?(?:[eE][-+]?\d+)?))\b'
      scope: constant.numeric.huml

    # Comments after values
    - match: '\s+(#)\s'
      captures:
        1: punctuation.definition.comment.huml
      push: comment-content

  double-quoted-string:
    - meta_scope: string.quoted.double.huml
    - match: '\\["\\/bfnrt]'
      scope: constant.character.escape.huml
    - match: '\\u[0-9a-fA-F]{4}'
      scope: constant.character.escape.unicode.huml
    - match: '"'
      scope: punctuation.definition.string.end.huml
      pop: true

  multiline-string-backtick:
    - meta_content_scope: string.quoted.other.multiline.huml
    - match: '^(\s*)(```)'
      captures:
        2: punctuation.definition.string.end.huml
      set: comment-or-eol

  multiline-string-quote:
    - meta_content_scope: string.quoted.double.multiline.huml
    - match: '^(\s*)(""")'
      captures:
        2: punctuation.definition.string.end.huml
      set: comment-or-eol

  comment-content:
    - meta_scope: comment.line.number-sign.huml
    - match: '$'
      pop: true

  comment-or-eol:
    - match: '\s*(#)\s'
      captures:
        1: punctuation.definition.comment.huml
      set: comment-content
    - match: '$'
      pop: true
