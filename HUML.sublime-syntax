%YAML 1.2
---
# Sublime Text syntax definition for HUML (Human-Readable Markup Language)
name: HUML
file_extensions:
  - huml
scope: source.huml

contexts:
  main:
    - include: version-declaration
    - include: comments
    - include: vector-key
    - include: scalar-key
    - include: list-item

  version-declaration:
    - match: '^%HUML\s+\d+\.\d+\s*(#.*)?$'
      scope: meta.version-declaration.huml
      captures:
        1: comment.line.huml

  comments:
    - match: '#.*$'
      scope: comment.line.huml

  vector-key:
    - match: '^(\s*)([\w_-]+|"[^"]*")\s*(::)(?:\s*(#.*)|(.*))?$'
      captures:
        2: entity.name.tag.vector-key.huml
        3: punctuation.separator.vector.huml
        4: comment.line.huml
        5: meta.vector-value.huml
      push:
        - match: '^(?!\s*[\w_-]+\s*:|.*::)'
          pop: true
        - include: inline-values

  scalar-key:
    - match: '^(\s*)([\w_-]+|"[^"]*")\s*(:)\s*(.*)$'
      captures:
        2: entity.name.tag.scalar-key.huml
        3: punctuation.separator.scalar.huml
        4: meta.scalar-value.huml
      push:
        - match: '$'
          pop: true
        - include: values

  list-item:
    - match: '^(\s*)(-)\s*(.*)$'
      captures:
        2: punctuation.definition.list.huml
        3: meta.list-item-value.huml
      push:
        - match: '^(?!\s*-)'
          pop: true
        - include: list-item-values

  list-item-values:
    - match: '::\s*(.*)$'
      scope: meta.inline-dict.huml
      captures:
        1: meta.inline-dict-value.huml
      push:
        - match: '$'
          pop: true
        - include: inline-values
    - include: values

  inline-values:
    - match: '([\w_-]+|"[^"]*")\s*:'
      captures:
        1: entity.name.tag.inline-key.huml
    - match: ','
      scope: punctuation.separator.comma.huml
    - include: values

  values:
    - include: multiline-strings
    - include: strings
    - include: numbers
    - include: constants
    - include: empty-containers
    - include: comments

  multiline-strings:
    - match: '"""'
      scope: punctuation.definition.string.begin.huml
      push:
        - meta_scope: string.quoted.triple.double.huml
        - match: '"""'
          scope: punctuation.definition.string.end.huml
          pop: true
    - match: '```'
      scope: punctuation.definition.string.begin.huml
      push:
        - meta_scope: string.quoted.triple.backtick.huml
        - match: '```'
          scope: punctuation.definition.string.end.huml
          pop: true

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.huml
      push:
        - meta_scope: string.quoted.double.huml
        - match: '"'
          scope: punctuation.definition.string.end.huml
          pop: true
        - match: '\\["\\/bfnrt]'
          scope: constant.character.escape.huml

  numbers:
    - match: '\b(nan|inf|[-+]inf)\b'
      scope: constant.numeric.special.huml
    - match: '\b0x[0-9A-Fa-f_]+\b'
      scope: constant.numeric.hex.huml
    - match: '\b0o[0-7_]+\b'
      scope: constant.numeric.octal.huml
    - match: '\b0b[01_]+\b'
      scope: constant.numeric.binary.huml
    - match: '\b-?\d[\d_]*(\.[d_]*)?([eE][-+]?[\d_]+)?\b'
      scope: constant.numeric.huml

  constants:
    - match: '\b(true|false)\b'
      scope: constant.language.boolean.huml
    - match: '\bnull\b'
      scope: constant.language.null.huml

  empty-containers:
    - match: '\[\]'
      scope: constant.language.empty.huml
    - match: '\{\}'
      scope: constant.language.empty.huml
